/*
Copyright (c) 2014, Muzzley

Permission to use, copy, modify, and/or distribute this software for 
any purpose with or without fee is hereby granted, provided that the 
above copyright notice and this permission notice appear in all 
copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE 
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR 
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR 
PERFORMANCE OF THIS SOFTWARE.
*/


// Generated by Flexc++ V1.05.00 on Fri, 21 Mar 2014 16:37:56 +0000

#ifndef JSONLexer_H_INCLUDED_
#define JSONLexer_H_INCLUDED_

// $insert baseclass_h
#include "JSONLexerbase.h"

// $insert namespace-open
namespace muzzley
{

// $insert classHead
class JSONLexer: public JSONLexerBase
{
    public:
        explicit JSONLexer(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        JSONLexer(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts
        void postCode(muzzley::JSONLexerBase::PostEnum__);     // re-implement this function for code that must
                            // be exec'ed before the patternmatching starts
};

// $insert scannerConstructors
inline JSONLexer::JSONLexer(std::istream &in, std::ostream &out)
:
    JSONLexerBase(in, out)
{}

inline JSONLexer::JSONLexer(std::string const &infile, std::string const &outfile)
:
    JSONLexerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int JSONLexer::lex()
{
    return lex__();
}

inline void JSONLexer::preCode() 
{
    // optionally replace by your own code
}

inline void JSONLexer::postCode(muzzley::JSONLexerBase::PostEnum__ a)
{
    // optionally replace by your own code
}

inline void JSONLexer::print() 
{
    print__();
}

// $insert namespace-close
}

#endif // JSONLexer_H_INCLUDED_

