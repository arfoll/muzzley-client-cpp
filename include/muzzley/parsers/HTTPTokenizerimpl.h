/*
Copyright (c) 2014, Muzzley

Permission to use, copy, modify, and/or distribute this software for 
any purpose with or without fee is hereby granted, provided that the 
above copyright notice and this permission notice appear in all 
copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE 
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR 
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR 
PERFORMANCE OF THIS SOFTWARE.
*/

#pragma once

#ifndef PACKAGE
#include <muzzley/config.h>
#endif
#ifdef HAVE_HTTP_CLIENT


// Generated by Bisonc++ V4.04.01 on Sun, 23 Mar 2014 13:54:15 +0000

    // Include this file in the sources of the class HTTPTokenizer.
#pragma once

// $insert class.h
#include <muzzley/parsers/HTTPTokenizer.h>
#include <muzzley/exceptions/SyntaxErrorException.h>

// $insert namespace-open
namespace muzzley
{

inline void HTTPTokenizer::error(char const *msg)
{
    //std::cerr << msg << '\n';
   throw muzzley::SyntaxErrorException(string(msg));

}

// $insert lex
inline int HTTPTokenizer::lex()
{
    return d_scanner.lex();
}

inline void HTTPTokenizer::print()
{
    print__();           // displays tokens if --print was specified
}

inline void HTTPTokenizer::exceptionHandler__(std::exception const &exc)
{
    throw;              // re-implement to handle exceptions thrown by actions
}

// $insert namespace-close
}

    // Add here includes that are only required for the compilation
    // of HTTPTokenizer's sources.


// $insert namespace-use
    // UN-comment the next using-declaration if you want to use
    // symbols from the namespace muzzley without specifying muzzley::
//using namespace muzzley;

    // UN-comment the next using-declaration if you want to use
    // int HTTPTokenizer's sources symbols from the namespace std without
    // specifying std::

//using namespace std;
#endif